What happens when you initialize a repository? Why do you need to do it?

When you initialize a new repo, git informs you that it has initialized an empty repo in the 
given location. This means that git creates its own directory called .git which by default
is hidden in most file explorers. This .git directory holds the meta data about the history 
of the repository/working directory. Git uses the .git to keep track of the state of the working directory. If you have
not made any commits before, running git status will indicate that there a no commit yets,
and it will also show you the list of files that are not yet been tracked.

Why we need to initialize git, before git begins to keep track of your files, it must make use of
the .git directory which it creates when it was initialized.

If you accidentally add a file to the staging area, you can remove it using git reset. For example, if you accidentally add lesson_2_reflections.txt, but don’t want it to be committed yet, run git reset lesson_2_reflections.txt

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is different from the working directory in that, it serves as a temporarily 
holding area before commits can be made. It helps to hold all the files that you would like to
commit at once, which you can add them one at a time to the area, while the working directory is
the folder you are currently working in. It has all the files and the .git repo.

The staging area offers a safe place to add/keep all logically related files/changes that one would like to commit at once.


http://udacity.github.io/git-styleguide/


How can you use the staging area to make sure you have one commit per logical change?

The staging area holds files to be committed. One can be able to check the changes in the staging area to be committed by using `git diff --staged` and any change(s) that should not be in 
can be removed at this staged using the `git reset fileName` to remove it from the staging area. 
This efficiency helps in ensuring that only changes that one is sure of and are in the logical
order can be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches in git help when new features are to be added, or experimental features are to be added
	without directly affecting the master branch/production branch. Branches set the stage to fully test out features
	and if they are deemed to be good enough, can be added to the master branch. Things can likely 
	break in the branches and fixed, but when they are in branches, they can easily be fixed.
	This helps in ensuring that features/experimental features are not directly implemented on the master/production branch especially when you are sharing the project with others.

How do the diagrams help you visualize the branch structure?

	Diagrams shows the relationship between branches and their commits. It indicate commits' parents and the children. This
	structure shows a detailed information of those commits whose history are reachable and unreachable. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When two branches are merged, git adds a new commit that brings together the changes made in both branches together. The head/tip
	of git points to the checked out branch before the merge. The commits that were made in both branches are accessible in the checkout branch and the commits are arranged according to the time they were made. This makes it difficult to identify which
	commit is the parent of a particular commit. However, you can always use 'git show commit_id' to examine changes that were introduced in a particular commit compare to its parent.
	Even if the branch (label) was deleted, its commit are still accessible after the merge.
	Depending on the changes introduced in the branches, sometimes merging results in conflict. This happens when changes were made to similar lines of the code in the same file(s). Git will always point out points of conflict for reconciliation before proceeding.

	Merging can be seen represented as done because it clearly indicate bringing together two branches and still been able to access 
	commits on both branches. The diagram even indicates those commit unreachable and those reachable after a merge.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	Git automatic merging takes care of a lot behind the scenes. However, when there are conflicts, merging has to be done manually, which involves identifying those areas of conflicts and resolving each before completing the merge. This can sometimes be cubersome, therefore its always better to strive for automatic merging by git.

